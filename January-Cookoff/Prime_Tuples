//----------------------------------------------------EXPLAINATION----------------------
// Since prime numbers are all odd and odd sum(c)  can be formed only by ODD+EVEN , we need to add 2 with all prime numbers to see if we get 
//a prime number as 2 is the only even prime number .  
//We can not devise a solution worth O(T*N) as it will give TLE , so we will have to think of a solution worth O(T) , In order to achieve an
//efficient solution we need to preprocess and form an array count[] that maintains the required count till index i.
// Since one of the prime numbers (say a) is always 2 , we only need to check if c and c-2 are prime as well.



#include <bits/stdc++.h>
using namespace std;

bool prime[1000001];

void seive()
{
    memset(prime, true, sizeof(prime));
 
    for (int p = 2; p * p <= 1000001; p++)
    {
        
        if (prime[p] == true)
        {
            for (int i = p * p; i <= 1000001; i += p)
                prime[i] = false;
        }
    }
}

int main() {
    seive();
	int t,cnt;
	int count[1000001];
	count[0]=0,count[1]=0,count[2]=0,count[3]=0;
	
	for(int i=4;i<1000001;i++)
	{
	    if(prime[i]&&prime[i-2])
	        count[i]=count[i-1]+1;
	    else
	        count[i]=count[i-1];
	}
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    cout<<count[n]<<"\n";
	}
	return 0;
}

